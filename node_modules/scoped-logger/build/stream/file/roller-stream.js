"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var process_1 = require("process");
var path_1 = require("path");
var fs_1 = require("fs");
var formatter_1 = require("../formatter");
var mkdir_1 = require("./mkdir");
var rollingOptions = {
    path: process_1.cwd(),
    filenames: {
        current: 'log',
        previous: 'log.{number}',
    },
    retention: 5,
    thresholdSize: Math.pow(1024, 3),
};
var RollerStream = (function () {
    function RollerStream(options) {
        if (options === void 0) { options = rollingOptions; }
        this.options = options;
        this.options = Object.assign({}, rollingOptions, options);
        this.open();
    }
    RollerStream.prototype.buffer = function (level, scope, message, args) {
        var _this = this;
        if (this.opened() === false) {
            if (this.open() === false) {
                return;
            }
        }
        try {
            fs_1.writeSync(this.fileDescriptor, formatter_1.Formatter.simpleText(level, scope, message, args));
            if (this.rollTimer) {
                clearTimeout(this.rollTimer);
            }
            this.rollTimer = setTimeout(function () { return _this.roll(); }, 150);
        }
        catch (exception) {
            console.error("Failure to write to log file: " + exception.stack);
        }
    };
    RollerStream.prototype.dispose = function () {
        if (this.opened()) {
            fs_1.closeSync(this.fileDescriptor);
        }
        this.fileDescriptor = null;
    };
    RollerStream.prototype.opened = function () {
        return this.fileDescriptor != null
            && this.fileDescriptor >= 0;
    };
    Object.defineProperty(RollerStream.prototype, "currentPath", {
        get: function () {
            return path_1.resolve(path_1.join(this.options.path, this.options.filenames.current));
        },
        enumerable: true,
        configurable: true
    });
    RollerStream.prototype.open = function () {
        this.dispose();
        try {
            mkdir_1.recursiveCreate(this.currentPath);
            this.fileDescriptor = fs_1.openSync(this.currentPath, 'a+');
            if (this.fileDescriptor < 0) {
                throw new Error("Open returned a sub-zero file descriptor");
            }
            return true;
        }
        catch (e) {
            console.error("Failed to open log file: " + e.stack);
            return false;
        }
    };
    RollerStream.prototype.roll = function () {
        var _this = this;
        var stat = fs_1.fstatSync(this.fileDescriptor);
        if (stat.size < this.options.thresholdSize) {
            return;
        }
        var previous = this.collectPrevious();
        if (previous.length + 1 >= this.options.retention) {
            var removals = previous.filter(function (v, index) { return index + 1 >= _this.options.retention; });
            for (var _i = 0, removals_1 = removals; _i < removals_1.length; _i++) {
                var file = removals_1[_i];
                fs_1.unlinkSync(file);
                previous.pop();
            }
        }
        this.archiveCurrent(previous);
    };
    RollerStream.prototype.resolvePrevious = function (index) {
        var filename = this.options.filenames.previous.replace('{number}', index.toString());
        return path_1.resolve(path_1.join(this.options.path, filename));
    };
    RollerStream.prototype.archiveCurrent = function (previous) {
        this.shiftPrevious(previous);
        fs_1.renameSync(this.currentPath, this.resolvePrevious(0));
        this.open();
    };
    RollerStream.prototype.shiftPrevious = function (files) {
        for (var iterator = files.length - 1; iterator >= 0; --iterator) {
            fs_1.renameSync(files[iterator], this.resolvePrevious(iterator + 1));
        }
    };
    RollerStream.prototype.collectPrevious = function () {
        var iterator = 0;
        var previous = new Array();
        while (true) {
            var filename = this.resolvePrevious(iterator);
            if (fs_1.existsSync(filename)) {
                previous.push(filename);
                iterator++;
            }
            else {
                break;
            }
        }
        return previous;
    };
    return RollerStream;
}());
exports.RollerStream = RollerStream;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sbGVyLXN0cmVhbS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvYm9uZC9zY29wZWQtbG9nZ2VyL3RzY29uZmlnLyIsInNvdXJjZXMiOlsic3RyZWFtL2ZpbGUvcm9sbGVyLXN0cmVhbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUE0QjtBQUU1Qiw2QkFBbUM7QUFFbkMseUJBUVk7QUFFWiwwQ0FBdUM7QUFLdkMsaUNBQXdDO0FBRXhDLElBQU0sY0FBYyxHQUFtQjtJQUNyQyxJQUFJLEVBQUUsYUFBRyxFQUFFO0lBQ1gsU0FBUyxFQUFFO1FBQ1QsT0FBTyxFQUFFLEtBQUs7UUFDZCxRQUFRLEVBQUUsY0FBYztLQUN6QjtJQUNELFNBQVMsRUFBRSxDQUFDO0lBQ1osYUFBYSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztDQUNqQyxDQUFDO0FBR0Y7SUFLRSxzQkFBb0IsT0FBd0M7UUFBeEMsd0JBQUEsRUFBQSx3QkFBd0M7UUFBeEMsWUFBTyxHQUFQLE9BQU8sQ0FBaUM7UUFDMUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFMUQsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELDZCQUFNLEdBQU4sVUFBTyxLQUFZLEVBQUUsS0FBWSxFQUFFLE9BQWUsRUFBRSxJQUFnQjtRQUFwRSxpQkFtQkM7UUFsQkMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDNUIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQzFCLE1BQU0sQ0FBQztZQUNULENBQUM7UUFDSCxDQUFDO1FBRUQsSUFBSSxDQUFDO1lBQ0gsY0FBUyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUs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