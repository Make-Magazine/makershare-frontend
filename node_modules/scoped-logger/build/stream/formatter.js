"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var process_1 = require("process");
var ansicolors = require('ansicolors');
var ansistyles = require('ansistyles');
var level_1 = require("../level");
var scope_1 = require("../scope");
var Formatter = (function () {
    function Formatter() {
    }
    Formatter.conditionalColorized = function (level, scope, message, args) {
        if (process_1.stdout.isTTY) {
            return Formatter.colorizedText(level, scope, message, args);
        }
        return Formatter.simpleText(level, scope, message, args);
    };
    Formatter.simpleText = function (level, scope, message, args) {
        var levelString = level_1.Level[level.toString()].toLowerCase();
        var date = new Date().toISOString();
        var scopeString = scope_1.scopeToStrings(scope).join(' > ');
        return "[" + date + "] [" + levelString + "] [" + scopeString + "] " + message + " " + formatArguments(args) + "\n";
    };
    Formatter.colorizedText = function (level, scope, message, args) {
        var levelString = colorizeLevel(level);
        var date = new Date().toISOString();
        var scopeArray = scope_1.scopeToStrings(scope);
        var scopeString = scopeArray.length > 0
            ? "\u001B[0;37m[" + scope_1.scopeToStrings(scope).join(ansicolors.brightCyan(' > ')) + "\u001B[0;37m]\u001B[=0l "
            : String();
        var coloredArgs = "\u001B[0;37m" + formatArguments(args) + "\u001B[=0l";
        return levelString + " " + scopeString + ansistyles.bright(message) + " " + coloredArgs;
    };
    return Formatter;
}());
exports.Formatter = Formatter;
var colorizeLevel = function (level) {
    var base = "[" + level_1.Level[level.toString()].toLowerCase() + "]";
    switch (level) {
        case level_1.Level.Error:
            return ansicolors.red(base);
        case level_1.Level.Debug:
        case level_1.Level.Info:
            return ansicolors.green(base);
        case level_1.Level.Warning:
            return ansicolors.yellow(base);
        default:
            return base;
    }
};
var formatArguments = function (args) {
    if (args == null || args.length === 0) {
        return String();
    }
    var mapped = args.map(function (a) {
        switch (typeof a) {
            case 'string':
            case 'number':
            case 'boolean':
            case 'function':
                return a.toString();
            default:
                return JSON.stringify(a, null, 2);
        }
    });
    return mapped.join(', ');
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0dGVyLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9ib25kL3Njb3BlZC1sb2dnZXIvdHNjb25maWcvIiwic291cmNlcyI6WyJzdHJlYW0vZm9ybWF0dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQStCO0FBRS9CLElBQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN6QyxJQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFekMsa0NBQStCO0FBRS9CLGtDQUdrQjtBQUVsQjtJQUFBO0lBaUNBLENBQUM7SUFoQ2UsOEJBQW9CLEdBQWxDLFVBQW1DLEtBQVksRUFBRSxLQUFZLEVBQUUsT0FBZSxFQUFFLElBQWdCO1FBQzlGLEVBQUUsQ0FBQyxDQUFDLGdCQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNqQixNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM5RCxDQUFDO1FBQ0QsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVhLG9CQUFVLEdBQXhCLFVBQXlCLEtBQVksRUFBRSxLQUFZLEVBQUUsT0FBZSxFQUFFLElBQWdCO1FBQ3BGLElBQU0sV0FBVyxHQUFHLGFBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUUxRCxJQUFNLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRXRDLElBQU0sV0FBVyxHQUFHLHNCQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXRELE1BQU0sQ0FBQyxNQUFJLElBQUksV0FBTSxXQUFXLFdBQU0sV0FBVyxVQUFLLE9BQU8sU0FBSSxlQUFlLENBQUMsSUFBSSxDQUFDLE9BQUksQ0FBQztJQUM3RixDQUFDO0lBRWEsdUJBQWEsR0FBM0IsVUFBNEIsS0FBWSxFQUFFLEtBQVksRUFBRSxPQUFlLEVBQUUsSUFBZ0I7UUFDdkYsSUFBTSxXQUFXLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXpDLElBQU0sSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFdEMsSUFBTSxVQUFVLEdBQUcsc0JBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV6QyxJQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUM7Y0FDckMsa0JBQWdCLHNCQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsNkJBQTBCO2NBQ2xHLE1BQU0sRUFBRSxDQUFDO1FBRWIsSUFBTSxXQUFXLEdBQUcsaUJBQWUsZUFBZSxDQUFDLElBQUksQ0FBQyxlQUFZLENBQUM7UUFFckUsTUFBTSxDQUFJLFdBQVcsU0FBSSxXQUFXLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBSSxXQUFhLENBQUM7SUFDckYsQ0FBQztJQUNILGdCQUFDO0FBQUQsQ0FBQyxBQWpDRCxJQWlDQztBQWpDcUIsOEJBQVM7QUFtQy9CLElBQU0sYUFBYSxHQUFHLFVBQUMsS0FBWTtJQUNqQyxJQUFNLElBQUksR0FBRyxNQUFJLGFBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsTUFBRyxDQUFDO0lBRTFELE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDZCxLQUFLLGFBQUssQ0FBQyxLQUFLO1lBQ2QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsS0FBSyxhQUFLLENBQUMsS0FBSyxDQUFDO1FBQ2pCLEtBQUssYUFBSyxDQUFDLElBQUk7WUFDYixNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQyxLQUFLLGFBQUssQ0FBQyxPQUFPO1lBQ2hCLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pDO1lBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNoQixDQUFDO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsSUFBTSxlQUFlLEdBQUcsVUFBQyxJQUFtQjtJQUMxQyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDbEIsQ0FBQztJQUVELElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQixLQUFLLFFBQVEsQ0FBQztZQUNkLEtBQUssUUFBUSxDQUFDO1lBQ2QsS0FBSyxTQUFTLENBQUM7WUFDZixLQUFLLFVBQVU7Z0JBQ2IsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN0QjtnQkFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLENBQUM7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNCLENBQUMsQ0FBQyJ9