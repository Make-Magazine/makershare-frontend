Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = require("path");
var exception_1 = require("../../../exception");
var WebpackModuleLoader = (function () {
    function WebpackModuleLoader(project, chunks) {
        this.project = project;
        this.chunks = chunks;
    }
    WebpackModuleLoader.prototype.load = function () {
        return this.lazy(this.project.applicationModule);
    };
    WebpackModuleLoader.prototype.lazy = function (module) {
        var matchingChunk = this.chunks.find(function (c) { return c.name === module.source; });
        if (matchingChunk == null) {
            throw new exception_1.CompilerException("Cannot find a webpack chunk with the name " + module.source);
        }
        var js = (matchingChunk.files || []).filter(function (f) { return /\.js$/.test(f); });
        switch (js.length) {
            case 0: throw new exception_1.CompilerException("Chunk " + module.source + " does not have associated output files");
            case 1: break;
            default: throw new exception_1.CompilerException("Chunk " + module.source + " has more than one JavaScript output: " + js.join(', '));
        }
        var candidate = path_1.join(this.project.workingPath.toString(), js[0]);
        var loaded = require(candidate);
        return module.symbol
            ? loaded[module.symbol]
            : loaded;
    };
    WebpackModuleLoader.prototype.dispose = function () {
        if (this.project.workingPath.equals(this.project.basePath) === false) {
            this.project.workingPath.unlink();
            this.project.workingPath = null;
        }
    };
    return WebpackModuleLoader;
}());
exports.WebpackModuleLoader = WebpackModuleLoader;
//# sourceMappingURL=loader.js.map