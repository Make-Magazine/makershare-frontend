Object.defineProperty(exports, "__esModule", { value: true });
var exception_1 = require("../../../../exception");
var CliConfig = require('@angular/cli/models/config').CliConfig;
var NgCliWebpackConfig = require('@angular/cli/models/webpack-config').NgCliWebpackConfig;
var CliLoader = (function () {
    function CliLoader() {
    }
    CliLoader.prototype.load = function (project) {
        var options = CliConfig.fromProject(project.basePath.toString());
        var app = applicationFromIdentifier(options.get('apps'), project.identifier);
        var environment = project.environment || String();
        var composedOptions = {
            target: project.environment === 'prod' ? 'production' : 'development',
            environment: environment,
            outputPath: project.workingPath ? project.workingPath.toString() : null,
            aot: false,
            sourcemaps: true,
            vendorChunk: false,
            verbose: true,
            progress: false,
            extractCss: true,
            watch: false,
            outputHashing: null,
            poll: null,
            app: project.identifier ? project.identifier.toString() : null
        };
        var cli = new NgCliWebpackConfig(composedOptions, app);
        return cli.buildConfig();
    };
    return CliLoader;
}());
exports.CliLoader = CliLoader;
var applicationFromIdentifier = function (apps, identifier) {
    if (apps == null) {
        throw new exception_1.CompilerException("No apps are defined in ng configuration");
    }
    switch (typeof identifier) {
        case 'object':
        case 'undefined':
            if (identifier != null) {
                throw new exception_1.CompilerException("Invalid application identifier: " + identifier);
            }
            switch (apps.length) {
                case 0:
                    throw new exception_1.CompilerException('No applications found in CLI configuration json');
                case 1:
                    return apps[0];
                default:
                    throw new exception_1.CompilerException('Your CLI configuration has more than one application, please provide explicit identifier to tell me which one to compile');
            }
        case 'number':
            return apps[identifier] || (function () {
                throw new exception_1.CompilerException("Application index " + identifier + " does not exist in CLI configuration");
            })();
        case 'string':
            return apps.find(function (a) { return a.name.toLowerCase() === identifier.toLowerCase(); }) || (function () {
                throw new exception_1.CompilerException("Cannot find an application named " + identifier + " in the CLI configuration");
            })();
        default:
            throw new exception_1.CompilerException("Invalid application identifier type: " + typeof identifier);
    }
};
//# sourceMappingURL=cli.js.map