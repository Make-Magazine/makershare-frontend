Object.defineProperty(exports, "__esModule", { value: true });
var webpack = require("webpack");
var chalk = require("chalk");
var path_1 = require("path");
var typescript_1 = require("typescript");
var exception_1 = require("../../../exception");
var loader_1 = require("./loader");
var platform_1 = require("../../../platform");
var options_1 = require("../options");
var WebpackCompiler = (function () {
    function WebpackCompiler(project, loader) {
        this.project = project;
        this.loader = loader;
    }
    WebpackCompiler.prototype.createPlatform = function (providers) {
        try {
            return platform_1.createJitPlatform(providers);
        }
        catch (exception) {
            console.error(chalk.red("Platform creation failed: this happens when you try to use " + chalk.green('@ngtools/webpack') + " during an ng-render build"));
            console.error("Please verify that you are using a regular TypeScript loader, eg " + chalk.green("['ts-loader', 'angular2-template-loader', 'angular-router-loader']"));
            console.error('This may not be related to your issue, but this a typical cause of this particular exception.');
            throw new exception_1.CompilerException('Failed to create platform instance', exception);
        }
    };
    WebpackCompiler.prototype.compile = function () {
        var _this = this;
        var _a = options_1.projectToOptions(this.project), ts = _a.ts, sources = _a.sources;
        var program = typescript_1.createProgram(sources, ts);
        this.project.applicationModule = options_1.loadApplicationModule(program, this.project.basePath, this.project.applicationModule);
        var entries = (_b = {},
            _b[this.project.applicationModule.source] = ["." + path_1.sep + this.project.applicationModule.source + ".ts"],
            _b);
        var base = this.loader.load(this.project);
        var configuration = Object.assign(base, {
            target: 'node',
            context: this.project.basePath.toString(),
            devtool: false,
            cache: true,
            entry: entries,
            output: {
                path: this.project.workingPath.toString(),
                filename: '[id].js',
                libraryTarget: 'commonjs2'
            },
            externals: [
                'angular-ssr',
                '@angular/animations',
                '@angular/cli',
                '@angular/common',
                '@angular/compiler',
                '@angular/compiler-cli',
                '@angular/core',
                '@angular/forms',
                '@angular/http',
                '@angular/platform-browser',
                '@angular/platform-browser-dynamic',
                '@angular/router',
                '@angular/tsc-wrapped',
                '@angular/service-worker',
                function (context, request, callback) {
                    var exclusions = [/\@ngrx/, /rxjs/, /zone\.js/, /reflect-metadata/];
                    if (exclusions.some(function (expr) { return expr.test(request); })) {
                        callback(null, "commonjs " + request.replace(/^.*?(\\|\/)node_modules(\\|\/)/, String()));
                    }
                    else {
                        callback();
                    }
                },
            ],
            stats: {
                chunks: true
            },
            plugins: removeProblematicPlugins(base.plugins || [])
        });
        var compiler = webpack(configuration);
        return new Promise(function (resolve, reject) {
            compiler.run(function (error, stats) {
                if (error) {
                    reject(error);
                }
                else if (stats.hasErrors()) {
                    reject(new exception_1.CompilerException(stats.toString()));
                }
                else {
                    resolve(new loader_1.WebpackModuleLoader(_this.project, stats['compilation'].chunks));
                }
                compiler = undefined;
                if (typeof gc === 'function') {
                    gc();
                }
            });
        });
        var _b;
    };
    return WebpackCompiler;
}());
exports.WebpackCompiler = WebpackCompiler;
var removeProblematicPlugins = function (plugins) {
    var problematic = [/Commons/, /HtmlWebpackPlugin/];
    return plugins.filter(function (plugin) {
        if (plugin.constructor == webpack.DefinePlugin) {
            return true;
        }
        if (plugin.constructor === Object) {
            return false;
        }
        if (problematic.some(function (expr) { return expr.test(plugin.constructor.name); })) {
            return false;
        }
        return true;
    });
};
//# sourceMappingURL=compiler.js.map