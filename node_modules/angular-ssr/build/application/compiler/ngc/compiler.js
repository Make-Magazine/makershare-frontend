var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var compiler_1 = require("@angular/compiler");
var tsc_wrapped_1 = require("@angular/tsc-wrapped");
var typescript_1 = require("typescript");
var path_1 = require("path");
var filesystem_1 = require("../../../filesystem");
var build_1 = require("./build");
var loader_1 = require("./loader");
var platform_1 = require("../../../platform");
var diagnostics_1 = require("./diagnostics");
var create_1 = require("./create");
var options_1 = require("../options");
var NgcCompiler = (function () {
    function NgcCompiler(project) {
        this.project = project;
    }
    NgcCompiler.prototype.createPlatform = function (providers) {
        return platform_1.createStaticPlatform(providers);
    };
    NgcCompiler.prototype.compile = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = loader_1.NgcModuleLoader.bind;
                        _b = [void 0, this.project];
                        return [4 /*yield*/, this.loadAndCompile()];
                    case 1: return [2 /*return*/, new (_a.apply(loader_1.NgcModuleLoader, _b.concat([_c.sent()])))()];
                }
            });
        });
    };
    NgcCompiler.prototype.roots = function (program) {
        var _this = this;
        var options = program.getCompilerOptions();
        var candidates = [options.rootDir].concat(options.rootDirs || []).filter(function (v) { return v; });
        return candidates.map(function (c) { return filesystem_1.pathFromString(filesystem_1.makeAbsolute(_this.project.basePath, c)); });
    };
    NgcCompiler.prototype.loadAndCompile = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, ts, ng, sources, compilerHost, program, roots, relativeOutput, workingPath, outputs, build, _b, host, compiler, generatedModules, metadataWriter, canonicalSources, templatedProgram, originalWriteFile, writeFile, emitResult;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = options_1.projectToOptions(this.project), ts = _a.ts, ng = _a.ng, sources = _a.sources;
                        compilerHost = typescript_1.createCompilerHost(ts, false);
                        program = typescript_1.createProgram(sources, ts, compilerHost);
                        diagnostics_1.assertProgram(program);
                        this.project.applicationModule = options_1.loadApplicationModule(program, this.project.basePath, this.project.applicationModule);
                        roots = this.roots(program);
                        relativeOutput = path_1.relative(this.project.basePath.toString(), ts.outDir);
                        workingPath = this.project.workingPath || process.cwd();
                        outputs = [
                            ts.outDir,
                            path_1.join(this.project.workingPath.toString(), relativeOutput),
                            workingPath
                        ].map(filesystem_1.pathFromString);
                        if (this.project.workingPath != null) {
                            ts.outDir = path_1.join(this.project.workingPath.toString(), relativeOutput);
                            ng.outDir = ts.outDir;
                        }
                        build = new build_1.Build(this.project.basePath, outputs, roots);
                        _b = create_1.createNgCompiler(compilerHost, program, ng, roots), host = _b.host, compiler = _b.compiler;
                        return [4 /*yield*/, this.generateTemplateCode(compilerHost, host, compiler, program, build)];
                    case 1:
                        generatedModules = _c.sent();
                        metadataWriter = new tsc_wrapped_1.MetadataWriterHost(compilerHost, ng, true);
                        canonicalSources = program.getSourceFiles().map(function (sf) { return sf.fileName; }).concat(generatedModules);
                        templatedProgram = typescript_1.createProgram(canonicalSources, ts, metadataWriter, program);
                        originalWriteFile = compilerHost.writeFile.bind(compilerHost);
                        writeFile = function (filename, data, writeByteOrderMark, onError, sourceFiles) {
                            build.emit(filename, sourceFiles);
                            return originalWriteFile(filename, data, writeByteOrderMark, onError, sourceFiles);
                        };
                        emitResult = templatedProgram.emit(undefined, writeFile);
                        if (emitResult) {
                            diagnostics_1.assertDiagnostics(emitResult.diagnostics);
                        }
                        return [2 /*return*/, build];
                }
            });
        });
    };
    NgcCompiler.prototype.generateTemplateCode = function (compilerHost, ngCompilerHost, compiler, program, build) {
        return __awaiter(this, void 0, void 0, function () {
            var filenames, analyzedModules, generatedModules;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filenames = program.getSourceFiles().map(function (sf) { return ngCompilerHost.getCanonicalFileName(sf.fileName); });
                        return [4 /*yield*/, compiler.analyzeModulesAsync(filenames)];
                    case 1:
                        analyzedModules = _a.sent();
                        generatedModules = compiler.emitAllImpls(analyzedModules);
                        return [2 /*return*/, generatedModules.map(function (generatedModule) {
                                var sourceFile = program.getSourceFile(generatedModule.srcFileUrl);
                                var emitPath = ngCompilerHost.calculateEmitPath(generatedModule.genFileUrl);
                                var source = generatedModule.source || compiler_1.toTypeScript(generatedModule, String());
                                compilerHost.writeFile(emitPath, source, false, function () { }, [sourceFile]);
                                build.emit(emitPath, [sourceFile]);
                                return emitPath;
                            })];
                }
            });
        });
    };
    return NgcCompiler;
}());
exports.NgcCompiler = NgcCompiler;
//# sourceMappingURL=compiler.js.map