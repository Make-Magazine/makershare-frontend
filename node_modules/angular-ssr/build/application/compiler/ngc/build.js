Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = require("path");
var filesystem_1 = require("../../../filesystem");
var transformation_1 = require("../../../transformation");
var Build = (function () {
    function Build(basePath, outputPaths, roots) {
        this.basePath = basePath;
        this.outputPaths = outputPaths;
        this.roots = roots;
        this.map = new Map();
    }
    Build.prototype.emit = function (filename, sourceFiles) {
        if (sourceFiles == null) {
            return;
        }
        for (var _i = 0, _a = sourceFiles.filter(function (sf) { return sf != null; }); _i < _a.length; _i++) {
            var sourceFile = _a[_i];
            var array = this.sourceArray(sourceFile.fileName);
            array.push(filename);
        }
    };
    Build.prototype.resolveCandidates = function (source) {
        var _this = this;
        var roots = this.roots.concat(this.outputPaths, [this.basePath]);
        var candidates = transformation_1.flatten(roots.map(function (r) {
            var combined = path_1.join(r.toString(), source);
            return [
                combined,
                combined.replace(/\//g, path_1.sep),
                combined.replace(/\\/g, '/'),
                combined.replace(/\//g, '\\')
            ];
        }));
        return candidates.find(function (c) { return _this.map.has(c); });
    };
    Build.prototype.resolve = function (module) {
        var unreachable = [null, null];
        var sourceFile = this.resolveCandidates(bareSource(module.source));
        if (sourceFile == null) {
            return unreachable;
        }
        var generated = this.map.get(sourceFile) || [];
        var factory = generated.find(function (file) { return /\.ngfactory\.ts$/.test(file); });
        if (factory == null) {
            return unreachable;
        }
        var js = this.map.get(factory);
        if (js == null) {
            return unreachable;
        }
        var jsfactory = js.find(function (file) { return /\.ngfactory\.js$/.test(file); });
        if (jsfactory) {
            return [jsfactory, symbolToNgFactory(module.symbol)];
        }
        return unreachable;
    };
    Build.prototype.dispose = function () {
        var emitted = transformation_1.flatten(Array.from(this.map.entries()).map(function (_a) {
            var k = _a[0], v = _a[1];
            return v;
        }));
        for (var _i = 0, _a = emitted.map(filesystem_1.fileFromString); _i < _a.length; _i++) {
            var file = _a[_i];
            file.unlink();
        }
        this.map.clear();
    };
    Build.prototype.sourceArray = function (filename) {
        var value = this.map.get(filename);
        if (value == null) {
            value = new Array();
            this.map.set(filename, value);
        }
        return value;
    };
    return Build;
}());
exports.Build = Build;
var bareSource = function (source) {
    if (!source) {
        return source;
    }
    if (/\.ngfactory\.(ts|js)$/i.test(source) === false) {
        source = source.replace(/\.(js|ts)$/, String());
        source = source.replace(/\.ngfactory$/, String());
        return /(\\|\/)$/.test(source)
            ? source + "index.ts"
            : source + ".ts";
    }
    return source;
};
var symbolToNgFactory = function (symbol) {
    if (!symbol) {
        return symbol;
    }
    return /NgFactory$/.test(symbol) === false
        ? symbol + "NgFactory"
        : symbol;
};
//# sourceMappingURL=build.js.map