import { Injector, Type } from '@angular/core';
export interface Variant<T> {
    transition?: Type<StateTransition<T>> | StateTransitionFunction<T>;
    values?: Array<T> | Set<T>;
}
export declare type VariantsMap = {
    [variant: string]: Variant<any>;
};
export interface StateReader<State> {
    getState(): State | Promise<State>;
}
export declare type ApplicationStateReaderFunction<R> = (injector: Injector) => Promise<any>;
export declare type ApplicationStateReader<R> = Type<StateReader<R>> | ApplicationStateReaderFunction<R>;
export interface Bootstrap {
    bootstrap(): Promise<void> | void;
}
export declare type ApplicationBootstrapperFunction = (injector: Injector) => Promise<void> | void;
export declare type ApplicationBootstrapper = Type<Bootstrap> | ApplicationBootstrapperFunction;
export interface StateTransition<T> {
    transition(value: T): Promise<void> | void;
}
export declare type StateTransitionFunction<T> = (injector: Injector, value: T) => Promise<void> | void;
export declare type ComposedTransition = (injector: Injector) => Promise<void>;
export declare type Postprocessor = (document: Document, html?: string) => void | string;
