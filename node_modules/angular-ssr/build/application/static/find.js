Object.defineProperty(exports, "__esModule", { value: true });
var typescript_1 = require("typescript");
var path_1 = require("path");
var traverse_1 = require("./traverse");
exports.exportClause = function (basePath, sourceFile, identifier) {
    var exports = sourceFile['symbol'].exports;
    for (var _i = 0, _a = Array.from(exports.keys()); _i < _a.length; _i++) {
        var exportIdentifier = _a[_i];
        if (exportIdentifier === identifier) {
            return {
                source: path_1.relative(basePath, sourceFile.fileName),
                symbol: exportIdentifier,
            };
        }
    }
    return null;
};
exports.importClause = function (basePath, sourceFile, identifier) {
    var result;
    traverse_1.traverse(sourceFile, typescript_1.SyntaxKind.ImportDeclaration, function (node) {
        if (node.importClause == null ||
            node.importClause.namedBindings == null) {
            return false;
        }
        var bindings = node.importClause.namedBindings;
        for (var _i = 0, _a = bindings.elements || []; _i < _a.length; _i++) {
            var clause = _a[_i];
            if (clause.name == null) {
                continue;
            }
            if ((clause.propertyName && clause.propertyName.text === identifier) || clause.name.text === identifier) {
                result = {
                    source: relativeImportPath(basePath, sourceFile.fileName, node.moduleSpecifier.text),
                    symbol: (clause.propertyName && clause.propertyName.text) || clause.name.text,
                    alias: clause.name.text
                };
                return true;
            }
        }
        return false;
    });
    return result;
};
var relativeImportPath = function (basePath, filename, relativePath) {
    return path_1.relative(basePath, path_1.resolve(path_1.dirname(filename), relativePath));
};
//# sourceMappingURL=find.js.map