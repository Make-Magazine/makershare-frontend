import { Provider } from '@angular/core';
import { ApplicationBuilder } from '../builder';
import { Application } from '../application';
import { ApplicationBootstrapper, ApplicationStateReader, Postprocessor, VariantsMap } from '../../contracts';
import { FileReference } from '../../../filesystem';
import { PrebootConfiguration } from '../../preboot';
import { RenderOperation } from '../../operation';
import { Route } from '../../../route';
export declare class ApplicationBuilderImpl<V> implements ApplicationBuilder<V> {
    readonly builder: (operation: RenderOperation) => Application<V>;
    readonly dispose: () => Promise<void>;
    protected operation: Partial<RenderOperation>;
    constructor(builder: (operation: RenderOperation) => Application<V>, dispose: () => Promise<void>, templateDocument?: FileReference | string);
    build(): Application<V>;
    templateDocument(template?: string): string;
    bootstrap(bootstrapper?: ApplicationBootstrapper): void;
    postprocess(transform?: Postprocessor): void;
    providers(providers: Array<Provider>): void;
    variants(map: VariantsMap): void;
    routes(routes?: Array<Route>): void;
    preboot(preboot?: PrebootConfiguration | boolean): void;
    blacklist(enable?: boolean): void;
    stateReader<R>(stateReader?: ApplicationStateReader<R>): void;
    stabilizeTimeout(milliseconds?: number): number | null;
}
