import { NgModuleFactory } from '@angular/core';
import { Observable } from 'rxjs';
import { Application } from '../application';
import { ModuleDeclaration } from '../../project';
import { PrerenderOptions } from '../options';
import { RenderOperation } from '../../operation';
import { Route } from '../../../route';
import { ServerPlatform } from '../../../platform';
import { Snapshot } from '../../../snapshot';
export declare class ApplicationImpl<V, M> implements Application<V> {
    private readonly platform;
    private readonly render;
    private readonly moduleFactory;
    readonly load: (module: ModuleDeclaration) => Promise<any>;
    readonly dispose: () => void | Promise<void>;
    constructor(platform: ServerPlatform, render: RenderOperation, moduleFactory: Promise<NgModuleFactory<M>>, load: (module: ModuleDeclaration) => Promise<any>, dispose: () => void | Promise<void>);
    prerender(options?: PrerenderOptions): Observable<Snapshot<V>>;
    renderUri(uri: string, variant?: V): Promise<Snapshot<V>>;
    discoverRoutes(): Promise<Array<Route>>;
    private renderToStream(operation);
    private renderVariant(operation);
}
