Object.defineProperty(exports, "__esModule", { value: true });
var exception_1 = require("../../../exception");
var filesystem_1 = require("../../../filesystem");
var ApplicationBuilderImpl = (function () {
    function ApplicationBuilderImpl(builder, dispose, templateDocument) {
        this.builder = builder;
        this.dispose = dispose;
        this.operation = { stabilizeTimeout: 5000 };
        if (templateDocument) {
            this.templateDocument(templateDocument.toString());
        }
    }
    ApplicationBuilderImpl.prototype.build = function () {
        return this.builder(this.operation);
    };
    ApplicationBuilderImpl.prototype.templateDocument = function (template) {
        if (template != null) {
            this.operation.templateDocument = templateFileToTemplateString(template);
        }
        return this.operation.templateDocument;
    };
    ApplicationBuilderImpl.prototype.bootstrap = function (bootstrapper) {
        if (this.operation.bootstrappers == null) {
            this.operation.bootstrappers = [];
        }
        this.operation.bootstrappers.push(bootstrapper);
    };
    ApplicationBuilderImpl.prototype.postprocess = function (transform) {
        if (this.operation.postprocessors == null) {
            this.operation.postprocessors = [];
        }
        this.operation.postprocessors.push(transform);
    };
    ApplicationBuilderImpl.prototype.providers = function (providers) {
        if (this.operation.providers == null) {
            this.operation.providers = [];
        }
        (_a = this.operation.providers).push.apply(_a, providers);
        var _a;
    };
    ApplicationBuilderImpl.prototype.variants = function (map) {
        this.operation.variants = map;
    };
    ApplicationBuilderImpl.prototype.routes = function (routes) {
        this.operation.routes = routes;
    };
    ApplicationBuilderImpl.prototype.preboot = function (preboot) {
        if (preboot === void 0) { preboot = true; }
        var config = typeof preboot === 'boolean'
            ? preboot === true
                ? {}
                : null
            : preboot;
        this.operation.preboot = config;
    };
    ApplicationBuilderImpl.prototype.blacklist = function (enable) {
        if (enable != null) {
            this.operation.blacklist = enable;
        }
    };
    ApplicationBuilderImpl.prototype.stateReader = function (stateReader) {
        this.operation.stateReader = stateReader;
    };
    // Wait for n milliseconds for the app to become stable (all asynchronous operations finished)
    // before serializing the DOM. If the value is zero, we will not wait at all, but this is inadvisable.
    // Best practice is to set this value very low for on-demand rendering (150ms approx) and much higher
    // for build-time rendering (since performance is not a concern in that case). Depending on what
    // your application does -- eg. HTTP requests -- you may need to adjust this value. Generally we
    // will wait for all async operations to finish, unless they take longer than {@link milliseconds}
    // in which case we will render the app as-is.
    ApplicationBuilderImpl.prototype.stabilizeTimeout = function (milliseconds) {
        if (milliseconds !== undefined) {
            this.operation.stabilizeTimeout = milliseconds;
        }
        return this.operation.stabilizeTimeout;
    };
    return ApplicationBuilderImpl;
}());
exports.ApplicationBuilderImpl = ApplicationBuilderImpl;
var templateFileToTemplateString = function (fileOrTemplate) {
    var file = filesystem_1.fileFromString(fileOrTemplate);
    if (file.exists()) {
        return file.content();
    }
    else if (/<html/i.test(fileOrTemplate) === false) {
        throw new exception_1.ConfigurationException("Invalid template file or missing <html> element: " + fileOrTemplate);
    }
    return fileOrTemplate;
};
//# sourceMappingURL=builder.js.map