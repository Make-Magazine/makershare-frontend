var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var filesystem_1 = require("../../../filesystem");
var fixtures_1 = require("../../../test/fixtures");
var from_source_1 = require("../from-source");
var path_1 = require("path");
// Unfortunately these tests are integration tests that require a lot of memory to run, and in the concurrent
// test execution environment of jest, it is very easy to bounce off the 4GB limit most CI providers have
// (even for paid plans). So we have to disable them on CI.
var disable = function (description, fn) { };
describe('applicationBuilderFromSource', function () {
    var nonci = process.env.CI ? disable : it;
    var ci = process.env.CI ? it : disable;
    nonci('can compile a basic project from source and render it', function () { return __awaiter(_this, void 0, void 0, function () {
        var builder, application, snapshots;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    builder = from_source_1.applicationBuilderFromSource(fixtures_1.getApplicationProject('source/test/fixtures/application-basic-inline', 'BasicInlineModule'), fixtures_1.templateDocument);
                    application = builder.build();
                    snapshots = application.prerender();
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, , 3, 4]);
                    return [4 /*yield*/, new Promise(function (resolve, reject) {
                            snapshots.subscribe(function (r) {
                                expect(r.exceptions).not.toBeNull();
                                expect(r.exceptions.length).toBe(0);
                                expect(r.uri).toBe('http://localhost/');
                                expect(r.variant).toBeUndefined();
                                expect(r.applicationState).toBeUndefined();
                                var expr = /<application ng-version="([^"]+)"><div>Hello!<\/div><\/application>/;
                                expect(expr.test(r.renderedDocument)).toBeTruthy();
                                resolve();
                            }, function (exception) { return reject(exception); });
                        })];
                case 2: return [2 /*return*/, _a.sent()];
                case 3:
                    application.dispose();
                    return [7 /*endfinally*/];
                case 4: return [2 /*return*/];
            }
        });
    }); });
    nonci('can compile from source and render lazy-loaded routes', function () { return __awaiter(_this, void 0, void 0, function () {
        var builder, application, snapshot, expr;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    builder = from_source_1.applicationBuilderFromSource(fixtures_1.getApplicationProject('source/test/fixtures/application-lazy-routed', 'BasicLazyRoutedModule'), fixtures_1.templateDocument);
                    application = builder.build();
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, , 3, 4]);
                    return [4 /*yield*/, application.renderUri('http://localhost/one')];
                case 2:
                    snapshot = _a.sent();
                    expect(snapshot.exceptions).not.toBeNull();
                    expect(snapshot.exceptions.length).toBe(0);
                    expect(snapshot.uri).toBe('http://localhost/one');
                    expect(snapshot.variant).toBeUndefined();
                    expect(snapshot.applicationState).toBeUndefined();
                    expr = /<application ng-version="([^"]+)"><router-outlet><\/router-outlet><basic-lazy-component( ng-version="([^"]+)")?>Lazy loaded component!<\/basic-lazy-component><\/application>/;
                    expect(expr.test(snapshot.renderedDocument)).toBeTruthy();
                    return [3 /*break*/, 4];
                case 3:
                    application.dispose();
                    return [7 /*endfinally*/];
                case 4: return [2 /*return*/];
            }
        });
    }); });
    nonci('can compile a project with custom webpack config', function () { return __awaiter(_this, void 0, void 0, function () {
        var root, basePath, tsconfig, project, builder, application, snapshot, expr;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    root = fixtures_1.getApplicationRoot();
                    basePath = filesystem_1.absolutePath(root.toString(), path_1.join('examples', 'demand-express'));
                    tsconfig = filesystem_1.absoluteFile(basePath, 'tsconfig.json');
                    project = {
                        basePath: basePath,
                        tsconfig: tsconfig,
                        workingPath: filesystem_1.pathFromRandomId(),
                    };
                    builder = from_source_1.applicationBuilderFromSource(project, path_1.join(project.basePath.toString(), 'app', 'index.html'));
                    application = builder.build();
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, , 3, 4]);
                    return [4 /*yield*/, application.renderUri('http://localhost/')];
                case 2:
                    snapshot = _a.sent();
                    expect(snapshot.exceptions).not.toBeNull();
                    expect(snapshot.exceptions.length).toBe(0);
                    expect(snapshot.uri).toBe('http://localhost/');
                    expect(snapshot.variant).toBeUndefined();
                    expect(snapshot.applicationState).toBeUndefined();
                    expr = /Sed ut perspiciatis unde/;
                    expect(expr.test(snapshot.renderedDocument)).toBeTruthy();
                    return [3 /*break*/, 4];
                case 3:
                    application.dispose();
                    return [7 /*endfinally*/];
                case 4: return [2 /*return*/];
            }
        });
    }); });
    ci('placeholder test for CI', function () { });
});
//# sourceMappingURL=from-source.js.map