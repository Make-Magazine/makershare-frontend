var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var creator_1 = require("./creator");
var platform_1 = require("../platform");
exports.snapshot = function (moduleRef, vop) { return __awaiter(_this, void 0, void 0, function () {
    var variant, uri, _a, stateReader, postprocessors, stabilizeTimeout, snapshot, contextSubscription, container, applicationState, renderedDocument;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                variant = vop.variant, uri = vop.uri, _a = vop.scope, stateReader = _a.stateReader, postprocessors = _a.postprocessors, stabilizeTimeout = _a.stabilizeTimeout;
                snapshot = {
                    console: new Array(),
                    exceptions: new Array(),
                    renderedDocument: undefined,
                    uri: uri,
                    variant: variant,
                };
                contextSubscription = subscribeToContext(moduleRef, snapshot);
                _b.label = 1;
            case 1:
                _b.trys.push([1, , 5, 6]);
                container = moduleRef.injector.get(platform_1.DocumentContainer);
                container.complete();
                return [4 /*yield*/, platform_1.waitForRouterNavigation(moduleRef)];
            case 2:
                _b.sent();
                // We have to tick once to kick off the init lifecycle events of the app.
                // The likelihood is that these lifecycle events will themselves cause
                // new asynchronous operations to start, for example HTTP requests. So
                // we wait for those to finish, then we tick once more, to update the
                // UI with any results that we may have received. If an application does
                // not make requests on startup then there will be no wait time for the
                // app to become stable, so there is no performance loss.
                tick(moduleRef);
                return [4 /*yield*/, platform_1.waitForApplicationToBecomeStable(moduleRef, stabilizeTimeout)];
            case 3:
                _b.sent();
                tick(moduleRef);
                return [4 /*yield*/, creator_1.injectState(moduleRef, stateReader, container.document)];
            case 4:
                applicationState = _b.sent();
                creator_1.injectPreboot(moduleRef, vop); // conditional on config
                renderedDocument = creator_1.transformAndSerializeDocument(postprocessors, container.document);
                if (/^<\!DOCTYPE html>/i.test(renderedDocument) === false) {
                    renderedDocument = "<!DOCTYPE html>" + renderedDocument;
                }
                return [2 /*return*/, Object.assign(snapshot, { renderedDocument: renderedDocument, applicationState: applicationState })];
            case 5:
                contextSubscription.unsubscribe();
                return [7 /*endfinally*/];
            case 6: return [2 /*return*/];
        }
    });
}); };
var subscribeToContext = function (moduleRef, snapshot) {
    var exceptions = moduleRef.injector.get(platform_1.ExceptionCollector);
    var log = moduleRef.injector.get(platform_1.ConsoleCollector);
    var subscriptions = new Array();
    subscriptions.push(exceptions.observable().subscribe(function (exception) { return snapshot.exceptions.push(exception); }));
    subscriptions.push(log.observable().subscribe(function (consolelog) { return snapshot.console.push(consolelog); }));
    return {
        unsubscribe: function () {
            for (var _i = 0, subscriptions_1 = subscriptions; _i < subscriptions_1.length; _i++) {
                var subscription = subscriptions_1[_i];
                subscription.unsubscribe();
            }
        }
    };
};
var tick = function (moduleRef) { return moduleRef.injector.get(core_1.ApplicationRef).tick(); };
//# sourceMappingURL=orchestrate.js.map