var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var memory_cache_1 = require("../memory-cache");
describe('MemoryCache', function () {
    it('can never contain more than the size provided in the constructor', function () { return __awaiter(_this, void 0, void 0, function () {
        var mockApplication, cache;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockApplication = { renderUri: function () { return new Promise(function (resolve) { return resolve({}); }); } };
                    cache = new memory_cache_1.MemoryCache(mockApplication, 1);
                    return [4 /*yield*/, cache.get('http://localhost/1')];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, cache.get('http://localhost/2')];
                case 2:
                    _a.sent();
                    expect(cache.has('http://localhost/1')).toBe(false);
                    return [2 /*return*/];
            }
        });
    }); });
    it('can reorder the items based on last access', function () { return __awaiter(_this, void 0, void 0, function () {
        var mockApplication, cache;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockApplication = { renderUri: function () { return new Promise(function (resolve) { return resolve({}); }); } };
                    cache = new memory_cache_1.MemoryCache(mockApplication, 3);
                    return [4 /*yield*/, cache.get('http://localhost/1')];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, cache.get('http://localhost/2')];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, cache.get('http://localhost/3')];
                case 3:
                    _a.sent();
                    expect(cache.has('http://localhost/1')).toBe(true);
                    expect(cache.has('http://localhost/2')).toBe(true);
                    expect(cache.has('http://localhost/3')).toBe(true);
                    return [4 /*yield*/, cache.get('http://localhost/1')];
                case 4:
                    _a.sent(); // move it to front
                    return [4 /*yield*/, cache.get('http://localhost/4')];
                case 5:
                    _a.sent();
                    expect(cache.has('http://localhost/2')).toBe(false);
                    mockApplication.renderUri = function () { return new Promise(function (resolve, reject) { return reject(new Error('Should not be called')); }); };
                    return [4 /*yield*/, cache.get('http://localhost/1')];
                case 6:
                    _a.sent(); // must be cached instance
                    return [2 /*return*/];
            }
        });
    }); });
    it('respects time-to-live expiry', function () {
        var called = 0;
        var mockApplication = {
            renderUri: function () {
                called++;
                return Promise.resolve({});
            }
        };
        var cache = new memory_cache_1.MemoryCache(mockApplication, 1, 1);
        cache.get('http://localhost/1');
        expect(called).toBe(1);
        return new Promise(function (resolve, reject) {
            setTimeout(function () {
                cache.get('http://localhost/1');
                if (called !== 2) {
                    reject(new Error('Cache should have missed twice'));
                }
                else {
                    resolve();
                }
            }, 10);
        });
    });
});
//# sourceMappingURL=memory-cache.js.map