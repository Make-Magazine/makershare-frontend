Object.defineProperty(exports, "__esModule", { value: true });
var trie_1 = require("../trie");
describe('Trie', function () {
    it('can insert a variant with a value', function () {
        var trie = new trie_1.Trie();
        expect(function () { return trie.insert({ a: 0, b: 1 }, { hello: 'world' }); }).not.toThrow();
    });
    it('can query the trie using different key instances', function () {
        var trie = new trie_1.Trie();
        var v1 = { a: 0, b: 10 };
        var v2 = { b: -1, a: 5 };
        expect(function () { return trie.insert(Object.assign({}, v1), { hello: 'Chris' }); }).not.toThrow();
        expect(function () { return trie.insert(Object.assign({}, v2), { hello: 'Bond' }); }).not.toThrow();
        var q1 = trie.query(v1);
        expect(q1).not.toBeNull();
        expect(q1.hello).toBe('Chris');
        var q2 = trie.query(v2);
        expect(q2).not.toBeNull();
        expect(q2.hello).toBe('Bond');
    });
    it('key values with different property order should compare equal', function () {
        var trie = new trie_1.Trie();
        var v1 = { a: 0, b: 0 };
        var v2 = { b: 0, a: 0 };
        expect(function () { return trie.insert(v1, { hello: 'Chris' }); }).not.toThrow();
        var result = trie.query(v2);
        expect(result).not.toBeNull();
        expect(result.hello).toBe('Chris');
    });
    it('inserting variants with different keys should throw an exception', function () {
        var trie = new trie_1.Trie();
        expect(function () { return trie.insert({ a: 1 }, 'hello'); }).not.toThrow();
        expect(function () { return trie.insert({ a: 1, b: 2 }, 'hello'); }).toThrow();
    });
    it('inserting and querying variants with different keys should throw an exception', function () {
        var trie = new trie_1.Trie();
        expect(function () { return trie.insert({ a: 1 }, 'hello'); }).not.toThrow();
        expect(function () { return trie.query({ a: 1, b: 2 }); }).toThrow();
    });
});
//# sourceMappingURL=trie.js.map