Object.defineProperty(exports, "__esModule", { value: true });
var TrieNode = (function () {
    function TrieNode(key, value) {
        this.key = key;
        this.value = value;
        this.children = new Map();
    }
    TrieNode.prototype.insert = function (key, value) {
        var _this = this;
        return this.children.get(key) || (function () {
            var node = new TrieNode(key, value);
            _this.children.set(key, node);
            return node;
        })();
    };
    TrieNode.prototype.find = function (key) {
        return this.children.get(key);
    };
    TrieNode.prototype.leaf = function () {
        return this.value !== undefined;
    };
    return TrieNode;
}());
exports.TrieNode = TrieNode;
var Trie = (function () {
    function Trie(prototypical) {
        this.root = new TrieNode(null);
        if (prototypical) {
            this.keys = Object.keys(prototypical);
            this.keys.sort();
        }
    }
    Trie.prototype.insert = function (variant, value) {
        var keys = Object.keys(variant);
        keys.sort();
        if (this.keys == null) {
            this.keys = keys;
        }
        else {
            this.assert(keys);
        }
        var iterator = this.root;
        for (var i = 0; i < keys.length; ++i) {
            iterator = i === keys.length - 1
                ? iterator.insert(variant[keys[i]], value)
                : iterator.insert(variant[keys[i]]);
        }
        console.assert(iterator.leaf());
        return iterator;
    };
    Trie.prototype.query = function (variant) {
        if (this.keys == null) {
            return undefined;
        }
        var keys = Object.keys(variant);
        keys.sort();
        this.assert(keys);
        var iterator = this.root;
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
            var k = keys_1[_i];
            iterator = iterator.find(variant[k]);
            if (iterator == null) {
                break;
            }
        }
        return iterator == null
            ? undefined
            : iterator.value;
    };
    Trie.prototype.assert = function (keys) {
        var equal = function (lhs, rhs) {
            if (lhs.length !== rhs.length) {
                return false;
            }
            return lhs.every(function (item, index) { return item === rhs[index]; });
        };
        if (equal(this.keys, keys) === false) {
            throw new Error("A variant must always contain the same keys: " + this.keys.join(', '));
        }
    };
    return Trie;
}());
exports.Trie = Trie;
//# sourceMappingURL=trie.js.map