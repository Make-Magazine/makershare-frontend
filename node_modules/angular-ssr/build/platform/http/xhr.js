Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("@angular/common");
var chalk = require("chalk");
var url = require("url");
var pending_requests_1 = require("./pending-requests");
var exception_1 = require("../../exception");
var injector_map_1 = require("../zone/injector-map");
var XmlHttpRequest = require('xhr2');
var dispatch = XmlHttpRequest.prototype._dispatchProgress;
var hasWarned = false;
XmlHttpRequest.prototype._dispatchProgress = function (eventid) {
    var pendingRequests = injector_map_1.injectableFromZone(Zone.current, pending_requests_1.PendingRequests);
    if (pendingRequests == null) {
        if (hasWarned === false) {
            console.warn(chalk.yellow('Your application is conducting an HTTP request from outside of a zone!'));
            console.warn(chalk.yellow('This will probably cause your application to render before the request finishes'));
            var stack = new Error().stack;
            if (stack) {
                console.warn(chalk.red(stack));
            }
            hasWarned = true;
        }
        return dispatch.apply(this, arguments);
    }
    switch (eventid) {
        case 'loadstart':
            pendingRequests.increase();
            break;
        case 'loadend':
            pendingRequests.decrease();
            break;
    }
    return dispatch.apply(this, arguments);
};
var send = XmlHttpRequest.prototype.send;
XmlHttpRequest.prototype.send = function (data) {
    this._url = adjustUri(this._url);
    return send.apply(this, arguments);
};
var adjustUri = function (uri) {
    if (uri.host == null) {
        var location_1 = injector_map_1.injectableFromZone(Zone.current, common_1.PlatformLocation);
        if (location_1) {
            return url.parse(url.resolve(location_1.href, uri.href));
        }
        else {
            try {
                return url.parse(url.resolve(Zone.current.name, uri.href));
            }
            catch (exception) {
                throw new exception_1.PlatformException("Cannot determine origin URI of zone: " + Zone.current.name, exception);
            }
        }
    }
    return uri;
};
//# sourceMappingURL=xhr.js.map