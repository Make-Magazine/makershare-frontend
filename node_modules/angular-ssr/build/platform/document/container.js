Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var tokens_1 = require("./tokens");
var browser_emulation_1 = require("../../runtime/browser-emulation");
var DocumentContainer = (function () {
    function DocumentContainer(templateDocument, requestUri) {
        this.windowRef = browser_emulation_1.createModernWindow(templateDocument, requestUri);
        this.cloneFrom(browser_emulation_1.bootWindow.document);
    }
    Object.defineProperty(DocumentContainer.prototype, "window", {
        get: function () {
            return this.windowRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DocumentContainer.prototype, "document", {
        get: function () {
            return this.windowRef.document;
        },
        enumerable: true,
        configurable: true
    });
    DocumentContainer.prototype.complete = function () {
        this.document.close();
    };
    DocumentContainer.prototype.ngOnDestroy = function () {
        // NOTE(bond): This is a feeble attempt to avoid memory leaks by deleting all document elements
        // and therefore all event handlers associated with them as soon as we finish rendering. As to
        // whether or not this is going to have any positive effect or not, I do not know.
        this.document.documentElement.outerHTML = String();
        delete this.windowRef;
    };
    DocumentContainer.prototype.cloneFrom = function (document) {
        // NOTE(bond): Calling this more than once is probably not a smart idea and this code should
        // either be removed or refactored. Perhaps this event should just be dispatched on bootWindow
        // creation instead of when we are ready to clone from it when creating a new DOM.
        var event = new Event('DOMContentLoaded');
        event.stopImmediatePropagation();
        event.stopPropagation();
        browser_emulation_1.bootWindow.document.dispatchEvent(event);
        if (document.title) {
            this.document.title = document.title;
        }
        var cloneContainers = ['head', 'body'];
        for (var _i = 0, cloneContainers_1 = cloneContainers; _i < cloneContainers_1.length; _i++) {
            var tag = cloneContainers_1[_i];
            if (this.document[tag] == null) {
                this.document.appendChild(this.document.createElement(tag));
            }
            for (var _a = 0, _b = Array.from(browser_emulation_1.bootWindow.document[tag].childNodes); _a < _b.length; _a++) {
                var node = _b[_a];
                this.document[tag].appendChild(node.cloneNode(true));
            }
        }
    };
    return DocumentContainer;
}());
DocumentContainer.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
DocumentContainer.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: core_1.Inject, args: [tokens_1.TemplateDocument,] },] },
    { type: undefined, decorators: [{ type: core_1.Inject, args: [tokens_1.RequestUri,] },] },
]; };
exports.DocumentContainer = DocumentContainer;
//# sourceMappingURL=container.js.map