Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var rxjs_1 = require("rxjs");
var snapshot_1 = require("../../snapshot");
var zone_1 = require("../zone");
var ConsoleCollector = (function () {
    function ConsoleCollector() {
        this.subject = new rxjs_1.ReplaySubject();
        this.baseConsole = zone_1.baseConsole;
    }
    ConsoleCollector.prototype.observable = function () {
        return this.subject.asObservable();
    };
    ConsoleCollector.prototype.assert = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.baseConsole.assert.apply(this.baseConsole, args);
        this.subject.next(createConsoleLog(snapshot_1.ConsoleType.Assertion, args));
    };
    ConsoleCollector.prototype.log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.baseConsole.log.apply(this.baseConsole, args);
        this.subject.next(createConsoleLog(snapshot_1.ConsoleType.Log, args));
    };
    ConsoleCollector.prototype.warn = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.baseConsole.warn.apply(this.baseConsole, args);
        this.subject.next(createConsoleLog(snapshot_1.ConsoleType.Warning, args));
    };
    ConsoleCollector.prototype.error = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.baseConsole.error.apply(this.baseConsole, args);
        this.subject.next(createConsoleLog(snapshot_1.ConsoleType.Error, args));
    };
    ConsoleCollector.prototype.dir = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.baseConsole.dir.apply(this.baseConsole, args);
        this.subject.next(createConsoleLog(snapshot_1.ConsoleType.InteractiveObject, args));
    };
    ConsoleCollector.prototype.time = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.baseConsole.time.apply(this.baseConsole, args);
        this.subject.next(createConsoleLog(snapshot_1.ConsoleType.Time, args));
    };
    ConsoleCollector.prototype.timeEnd = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.baseConsole.timeEnd.apply(this.baseConsole, args);
        this.subject.next(createConsoleLog(snapshot_1.ConsoleType.TimeEnd, args));
    };
    ConsoleCollector.prototype.trace = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.baseConsole.trace.apply(this.baseConsole, args);
        this.subject.next(createConsoleLog(snapshot_1.ConsoleType.Trace, args));
    };
    ConsoleCollector.prototype.ngOnDestroy = function () {
        this.subject.complete();
        this.subject.unsubscribe();
    };
    return ConsoleCollector;
}());
ConsoleCollector.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
ConsoleCollector.ctorParameters = function () { return []; };
exports.ConsoleCollector = ConsoleCollector;
var createConsoleLog = function (type, args) {
    var date = new Date();
    return { type: type, date: date, args: args };
};
//# sourceMappingURL=console.js.map