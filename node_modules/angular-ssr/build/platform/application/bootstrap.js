var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var exception_1 = require("../../exception");
var type_to_function_1 = require("../../transformation/type-to-function");
exports.bootstrapModule = function (zone, moduleRef) {
    return new Promise(function (resolve, reject) {
        var exceptionHandler = moduleRef.injector.get(core_1.ErrorHandler);
        zone.onError.subscribe(function (exception) {
            exceptionHandler.handleError(exception);
            reject(exception);
        });
        var description = moduleRef.instance.constructor.name;
        var applicationInit = moduleRef.injector.get(core_1.ApplicationInitStatus, null);
        if (applicationInit == null) {
            throw new exception_1.PlatformException("Your application module " + description + " does not import ApplicationModule, but it must");
        }
        var applicationRef = moduleRef.injector.get(core_1.ApplicationRef);
        var _a = moduleRef, components = _a._bootstrapComponents, ngDoBootstrap = _a.instance.ngDoBootstrap;
        var location = moduleRef.injector.get(common_1.PlatformLocation);
        location.initializationComplete();
        var initializer = applicationInit;
        if (typeof initializer.runInitializers === 'function') {
            initializer.runInitializers();
        }
        applicationInit.donePromise.then(function () {
            if (components) {
                for (var _i = 0, components_1 = components; _i < components_1.length; _i++) {
                    var c = components_1[_i];
                    applicationRef.bootstrap(c);
                }
                resolve();
            }
            else if (typeof ngDoBootstrap === 'function') {
                var bootstrapResult = ngDoBootstrap.bind(moduleRef.instance)(applicationRef);
                Promise.resolve(bootstrapResult).then(function () { return resolve(); }).catch(function (exception) { return reject(exception); });
            }
            else {
                reject(new exception_1.PlatformException("Module declares neither bootstrap nor ngDoBootstrap: " + description));
            }
        })
            .catch(function (exception) { return reject(exception); });
    });
};
exports.executeBootstrap = function (moduleRef, bootstrappers, transition) { return __awaiter(_this, void 0, void 0, function () {
    var bootstrap;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                bootstrap = exports.composeBootstrap(bootstrappers);
                return [4 /*yield*/, Promise.resolve(bootstrap(moduleRef.injector))];
            case 1:
                _a.sent();
                if (!(typeof transition === 'function')) return [3 /*break*/, 3];
                return [4 /*yield*/, Promise.resolve(transition(moduleRef.injector))];
            case 2:
                _a.sent();
                _a.label = 3;
            case 3: return [2 /*return*/];
        }
    });
}); };
exports.composeBootstrap = function (bootstrappers) {
    if (bootstrappers == null || bootstrappers.length === 0) {
        return function (injector) { };
    }
    return function (injector) {
        var promises = bootstrappers.map(function (b) { return Promise.resolve(type_to_function_1.typeToInjectorFunction(b, function (instance) { return instance.bootstrap(); })(injector)); });
        return Promise.all(promises);
    };
};
//# sourceMappingURL=bootstrap.js.map