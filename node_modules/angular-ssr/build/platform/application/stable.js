var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var chalk = require("chalk");
var http_1 = require("../http");
var Rx_1 = require("rxjs/Rx");
exports.waitForApplicationToBecomeStable = function (moduleRef, timeout) { return __awaiter(_this, void 0, void 0, function () {
    var applicationRef, requests;
    return __generator(this, function (_a) {
        applicationRef = moduleRef.injector.get(core_1.ApplicationRef);
        requests = moduleRef.injector.get(http_1.PendingRequests);
        return [2 /*return*/, new Promise(function (resolve) {
                var timer;
                if (typeof timeout === 'number' && timeout > 0) {
                    timer = setTimeout(function () {
                        console.warn(chalk.yellow("Timed out while waiting for NgZone to become stable after " + timeout + "ms! This is a serious performance problem!"));
                        console.warn(chalk.yellow('This likely means that your application is stuck in an endless loop of change detection or some other pattern of misbehaviour'));
                        console.warn(chalk.yellow('In a normal application, a zone becomes stable very quickly'));
                        console.warn('Proceeding with render operation even though the zone is not stable: this is a very dangerous thing to do!');
                        console.warn('You can adjust the zone-becomes-stable timeout with ApplicationBuilder::stabilizeTimeout(), or zero to disable');
                        resolve();
                    }, timeout);
                }
                var combined = Rx_1.Observable.combineLatest(applicationRef.isStable, requests.requestsPending(), function (appStable, pending) {
                    return appStable && pending === 0;
                });
                var subscription = combined.subscribe(function (v) {
                    if (v === true) {
                        if (subscription) {
                            subscription.unsubscribe();
                        }
                        if (timer != null) {
                            clearTimeout(timer);
                        }
                        resolve();
                    }
                });
            })];
    });
}); };
//# sourceMappingURL=stable.js.map