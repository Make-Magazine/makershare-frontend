var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var exception_1 = require("../exception");
var transformation_1 = require("../transformation");
var application_1 = require("./application");
var injector_1 = require("./injector");
var zone_1 = require("./zone");
var ServerPlatform = (function () {
    function ServerPlatform(injector) {
        this.injector = injector;
        this.references = new Set();
        this.destroyers = new Array();
    }
    ServerPlatform.prototype.compileModule = function (moduleType, compilerOptions) {
        if (compilerOptions === void 0) { compilerOptions = []; }
        var compiler = this.getCompiler(compilerOptions);
        return compiler.compileModuleAsync(moduleType);
    };
    ServerPlatform.prototype.bootstrapModule = function (moduleType, compilerOptions, providers) {
        if (compilerOptions === void 0) { compilerOptions = []; }
        return __awaiter(this, void 0, void 0, function () {
            var module;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.compileModule(moduleType, compilerOptions)];
                    case 1:
                        module = _a.sent();
                        return [4 /*yield*/, this.bootstrapModuleFactory(module, providers)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ServerPlatform.prototype.bootstrapModuleFactory = function (module, providers, bootstrap) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var zone, injector, moduleRef, unmap;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        zone = new core_1.NgZone({ enableLongStackTrace: true });
                        injector = injector_1.createPlatformInjector(this.injector, zone, providers);
                        moduleRef = module.create(injector);
                        unmap = zone_1.mapZoneToInjector(Zone.current, moduleRef.injector);
                        moduleRef.onDestroy(function () {
                            unmap();
                            _this.references.delete(moduleRef);
                        });
                        if (!(typeof bootstrap === 'function')) return [3 /*break*/, 2];
                        return [4 /*yield*/, Promise.resolve(bootstrap(moduleRef))];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, application_1.bootstrapModule(zone, moduleRef).then(function () { return _this.references.add(moduleRef); })];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, moduleRef];
                }
            });
        });
    };
    ServerPlatform.prototype.getCompiler = function (compilerOptions) {
        var options = transformation_1.array(compilerOptions || {});
        var instantiate = function (compilerFactory) { return compilerFactory.createCompiler(options); };
        return instantiate(this.injector.get(core_1.CompilerFactory));
    };
    ServerPlatform.prototype.onDestroy = function (callback) {
        if (this.destroyed) {
            throw new exception_1.PlatformException("It does not make sense to register an onDestroy handler after destroy has already taken place");
        }
        this.destroyers.push(callback);
    };
    Object.defineProperty(ServerPlatform.prototype, "destroyed", {
        get: function () {
            return this.destroyers == null;
        },
        enumerable: true,
        configurable: true
    });
    ServerPlatform.prototype.destroy = function () {
        return __awaiter(this, void 0, void 0, function () {
            var destroyers;
            return __generator(this, function (_a) {
                if (this.destroyed) {
                    return [2 /*return*/];
                }
                destroyers = this.destroyers;
                delete this.destroyers;
                // The zone of an application zone at this point in the process is either already stable or will never become
                // stable. We can deduce this because we already waited for it to become stable as part of the bootstrap, and
                // either it did indeed become stable and therefore is still stable now, or we timed out waiting for it to become
                // stable, which indicates a likelihood that the application will never become stable because it has some kind
                // of setInterval running continuously.
                this.references.forEach(function (module) { return module.destroy(); });
                destroyers.forEach(function (handler) { return handler(); });
                return [2 /*return*/];
            });
        });
    };
    return ServerPlatform;
}());
ServerPlatform.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
ServerPlatform.ctorParameters = function () { return [
    { type: core_1.Injector, decorators: [{ type: core_1.Inject, args: [core_1.Injector,] },] },
]; };
exports.ServerPlatform = ServerPlatform;
//# sourceMappingURL=platform.js.map