var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var type_1 = require("../type");
var exception_1 = require("../../exception");
var base_1 = require("./base");
var FileImpl = (function (_super) {
    __extends(FileImpl, _super);
    function FileImpl(owner, sourcePath) {
        var _this = _super.call(this, sourcePath) || this;
        _this.owner = owner;
        return _this;
    }
    FileImpl.prototype.exists = function () {
        return this.type() !== type_1.FileType.Unknown;
    };
    FileImpl.prototype.parent = function () {
        return this.owner;
    };
    FileImpl.prototype.create = function (content) {
        fs_1.writeFileSync(this.toString(), content, { flag: 'w' });
        this.cachedContent = content;
    };
    FileImpl.prototype.content = function () {
        if (this.cachedContent === undefined) {
            if (this.type() !== type_1.FileType.File) {
                throw new exception_1.FilesystemException("Path is not a file: " + this.toString());
            }
            try {
                this.cachedContent = fs_1.readFileSync(this.toString()).toString();
            }
            catch (exception) {
                throw new exception_1.FilesystemException("Failed to read file: " + this.toString() + ": " + exception.toString(), exception);
            }
        }
        return this.cachedContent;
    };
    FileImpl.prototype.assert = function () {
        if (this.exists() === false) {
            throw new exception_1.FilesystemException("FileReference is nonexistent: " + this.sourcePath);
        }
    };
    FileImpl.prototype.unlink = function () {
        try {
            fs_1.unlinkSync(this.toString());
        }
        catch (exception) { }
    };
    FileImpl.prototype.toString = function () {
        return this.sourcePath;
    };
    return FileImpl;
}(base_1.FilesystemBaseImpl));
exports.FileImpl = FileImpl;
//# sourceMappingURL=file.js.map