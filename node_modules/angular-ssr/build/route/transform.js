Object.defineProperty(exports, "__esModule", { value: true });
var url = require("url");
var exception_1 = require("../exception");
var static_1 = require("../static");
exports.routeToPath = function (route) {
    var split = route.path.reduce(function (p, c) { return p.concat(c.split('/')); }, []);
    var mapped = split.map(function (component) {
        if (component.startsWith(':')) {
            var parameter = component.substring(1);
            if (route.parameters == null || route.parameters.has(parameter) === false) {
                throw new exception_1.RouteException("No parameter value for: " + parameter);
            }
            return route.parameters.get(parameter);
        }
        return component;
    });
    return mapped.filter(function (v) { return v; }).join('/');
};
exports.routeToPathWithParameters = function (route) {
    var reduced = route.path.reduce(function (p, c) { return p.concat(c.split('/')); }, new Array());
    return reduced.join('/');
};
exports.routeToUri = function (route) {
    var resultUri = "" + static_1.ApplicationFallbackOptions.fallbackUri + exports.routeToPath(route);
    if (route.queryString) {
        if (route.queryString.startsWith('?')) {
            route.queryString = route.queryString.substring(1);
        }
        resultUri += "?" + route.queryString;
    }
    return resultUri;
};
exports.pathFromUri = function (uri) {
    try {
        return url.parse(uri).path;
    }
    catch (exception) {
        throw new exception_1.RouteException("Invalid URI: " + uri, exception);
    }
};
//# sourceMappingURL=transform.js.map