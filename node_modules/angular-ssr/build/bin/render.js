var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
require("./vendor");
var path_1 = require("path");
var process_1 = require("process");
var chalk = require("chalk");
var Module = require('module');
var index_1 = require("../index");
var options_1 = require("./options");
var options = options_1.parseCommandLineOptions();
adjustEnvironment();
index_1.log.info("Rendering application from source (working path: " + options.project.workingPath + ")");
var builder = index_1.applicationBuilderFromSource(options.project, options.templateDocument);
builder.preboot(options.preboot);
builder.blacklist(options.blacklist);
// Since we are doing rendering at build time, there is no need to enforce quick zone stabilization.
// We can bump it up so that the process does not fail if an HTTP request takes a long time or
// something along those lines prevents the app zone from stabilizing quickly.
builder.stabilizeTimeout(16000);
var application = builder.build();
var applicationRenderer = index_1.applicationPrerenderer(application);
var execute = function () { return __awaiter(_this, void 0, void 0, function () {
    var prerender;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, , 2, 3]);
                prerender = { pessimistic: options.pessimistic };
                return [4 /*yield*/, applicationRenderer.prerenderTo(options.output, prerender)];
            case 1:
                _a.sent();
                return [3 /*break*/, 3];
            case 2:
                // If we are debugging, then we are likely to produce a stack trace that includes compiled
                // output files. If we simply delete those files upon completion as we normally do, then
                // the developer will not be able to see what code is generating the issue they have.
                if (options.debug === false) {
                    application.dispose();
                }
                return [7 /*endfinally*/];
            case 3: return [2 /*return*/];
        }
    });
}); };
execute()
    .catch(function (exception) {
    var message = options.debug
        ? chalk.red(exception.stack)
        : chalk.red(exception.message) + ' (use --debug to see a full stack trace)';
    index_1.log.error("Failed to render application: " + message);
    process_1.exit(1);
});
function adjustEnvironment() {
    // Because we compile our outputs to a temporary path outside the filesystem structure of
    // the project, we must tweak the module search paths to look inside the project node
    // modules folder as well as our own modules folder. Otherwise we are going to encounter
    // require exceptions when the application attempts to load libraries.
    var roots = [options.project.basePath, index_1.pathFromString(path_1.dirname(module.filename))];
    var search = roots.map(function (r) { return r.findInAncestor(index_1.Files.modules); }).filter(function (f) { return f != null; }).map(function (f) { return f.toString(); });
    var originalCall = Module._nodeModulePaths;
    Module._nodeModulePaths = function (from) {
        return originalCall.call(this, from).concat(search);
    };
    Object.assign(process_1.env, { NG_RENDER: true });
}
//# sourceMappingURL=render.js.map