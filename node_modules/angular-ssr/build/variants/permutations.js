Object.defineProperty(exports, "__esModule", { value: true });
var compose_1 = require("./compose");
exports.permutations = function (variants) {
    var options = {};
    for (var _i = 0, _a = Object.keys(variants); _i < _a.length; _i++) {
        var k = _a[_i];
        options[k] = Array.from(variants[k].values);
    }
    var combinations = recursivePermutations(options);
    var tuples = combinations.map(function (variant) { return [variant, compose_1.composeTransitions(variants, variant)]; });
    return new Map(tuples);
};
var recursivePermutations = function (options) {
    var keys = Object.keys(options);
    if (keys.length === 0) {
        return new Array();
    }
    var state = {};
    var transformer = function (index) {
        var reducer = function (p, c) {
            state[keys[index]] = c;
            if (index + 1 < keys.length) {
                return p.concat.apply(p, transformer(index + 1));
            }
            return p.concat(Object.assign({}, state));
        };
        return options[keys[index]].reduce(reducer, new Array());
    };
    return transformer(0);
};
//# sourceMappingURL=permutations.js.map