Object.defineProperty(exports, "__esModule", { value: true });
var exception_1 = require("../exception");
var transformation_1 = require("../transformation");
exports.composeTransitions = function (variants, values) {
    return function (injector) {
        if (variants == null || Object.keys(variants).length === 0) {
            return Promise.resolve();
        }
        var promises = new Array();
        var _loop_1 = function (v, value) {
            var variant = v;
            if (value == null) {
                // If there is no value provided for this variant, and if null or undefined is not
                // explicitly listed in the variant values, then we will just skip this transition
                // altogether. If you don't want this behaviour, then either add null or undefined
                // to the set of permissible variant values, or always provide values for each variant
                // when you call renderUri and so forth.
                if (new Set(variant.values).has(value) === false) {
                    return "continue";
                }
            }
            var fn = transformation_1.typeToInjectorFunction(variant.transition, function (t) { return t.transition(value); });
            promises.push(Promise.resolve(fn(injector, value))
                .catch(function (exception) { return Promise.reject(new exception_1.RuntimeException("Transition failed: " + variant.transition.name + ": " + value, exception)); }));
        };
        for (var _i = 0, _a = Object.keys(variants).map(function (k) { return [k, variants[k], values[k]]; }); _i < _a.length; _i++) {
            var _b = _a[_i], v = _b[1], value = _b[2];
            _loop_1(v, value);
        }
        return Promise.all(promises);
    };
};
//# sourceMappingURL=compose.js.map