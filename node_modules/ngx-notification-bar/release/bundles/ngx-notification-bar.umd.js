(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common'], factory) :
	(factory((global['ngx-notification-bar'] = {}),global.ng.core,global.ng.common));
}(this, (function (exports,_angular_core,_angular_common) { 'use strict';

/**
 * A service to create notification, It can be used from any component or guard
 */
var NotificationBarService = (function () {
    function NotificationBarService() {
        this.onCreate = new _angular_core.EventEmitter();
    }
    NotificationBarService.prototype.create = function (notification) {
        this.onCreate.emit(notification);
    };
    NotificationBarService.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    NotificationBarService.ctorParameters = function () { return []; };
    return NotificationBarService;
}());

var MESSAGES_CONFIG = new _angular_core.OpaqueToken('notification-bar.messages.config');
var NotificationBarComponent = (function () {
    function NotificationBarComponent(notificationBarService, config) {
        this.notificationBarService = notificationBarService;
        this.config = config;
        this.notifications = [];
        this.defaults = {
            message: '',
            type: exports.NotificationType.Info,
            autoHide: true,
            hideDelay: 3000,
            isHtml: false,
            allowClose: false,
            hideOnHover: true
        };
        this.subscription = this.notificationBarService.onCreate.subscribe(this.addNotification.bind(this));
    }
    NotificationBarComponent.prototype.ngOnInit = function () { };
    NotificationBarComponent.prototype.addNotification = function (notification) {
        var _this = this;
        var newNotification = Object.assign({}, this.defaults, notification);
        newNotification.typeValue = exports.NotificationType[newNotification.type].toLowerCase();
        if (this.config && this.config.messages) {
            newNotification.message = this.config.messages[notification.message] || notification.message;
        }
        this.notifications.push(newNotification);
        if (newNotification.autoHide) {
            window.setTimeout(function () {
                _this.hideNotification(newNotification);
            }, newNotification.hideDelay);
        }
    };
    NotificationBarComponent.prototype.hideNotification = function (notification) {
        var index = this.notifications.indexOf(notification);
        this.notifications.splice(index, 1);
    };
    NotificationBarComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    NotificationBarComponent.prototype.hideOnHover = function (notification) {
        if (notification.hideOnHover) {
            this.hideNotification(notification);
        }
    };
    NotificationBarComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'notification-bar',
                    styles: ["\n        :host {\n          position: relative;\n          display: block;\n        }\n        \n        .notifications-container {\n          position: fixed;\n          top: 0px;\n          right: 0;\n          left: 0;\n          line-height: 25px;\n          width: 100%;\n          z-index: 6;\n          overflow: hidden;\n        }\n        \n        .notification {\n          position: relative;\n          text-align: center;\n          font-size: 12px;\n          color: #fff;\n        }\n        \n        .message {\n          padding: 0 12px;\n        }\n        \n        .error {\n          background-color: #F64747;\n          border-bottom: 1px solid #f31515;\n        }\n        \n        .success {\n          background-color: #03C9A9;\n          border-bottom: 1px solid #02aa8f;\n        }\n        \n        .warning {\n          background-color: #F7CA18;\n          border-bottom: 1px solid #e7ba08;\n        }\n        \n        .info {\n          background-color: #0c6997;\n          border-bottom: 1px solid #0c6997;\n        }\n        \n        .close-click {\n          font-size: 22px;\n          cursor: pointer;\n          padding: 10px;\n          position: relative;\n          top: 2px;\n          margin: 0 auto;\n        }\n    "],
                    template: "\n        <div class=\"notifications-container\">\n            <div *ngFor=\"let notification of notifications; let i = index;\"\n                 class=\"notification {{notification.typeValue}}\"\n                 (mouseover)=\"hideOnHover(notification)\"\n                 [@flyDown]>\n                <span *ngIf=\"notification.isHtml\" class=\"message\" [innerHTML]=\"notification.message\"></span>\n                <span *ngIf=\"!notification.isHtml\" class=\"message\">{{notification.message}}</span>\n                <span class=\"close-click\" *ngIf=\"notification.allowClose\" (click)=\"hideNotification(notification)\">\u00D7</span>\n            </div>\n        </div>\n    ",
                    animations: [
                        _angular_core.trigger('flyDown', [
                            _angular_core.state('in', _angular_core.style({
                                opacity: 1,
                                transform: 'translateY(0)'
                            })),
                            _angular_core.transition('void => *', [
                                _angular_core.style({
                                    opacity: 0,
                                    transform: 'translateY(-100%)'
                                }),
                                _angular_core.animate('600ms ease-in')
                            ]),
                            _angular_core.transition('* => void', [
                                _angular_core.animate('200ms ease-out', _angular_core.style({
                                    opacity: 0,
                                    transform: 'translateY(-100%)'
                                }))
                            ])
                        ])
                    ]
                },] },
    ];
    /** @nocollapse */
    NotificationBarComponent.ctorParameters = function () { return [
        { type: NotificationBarService, },
        { type: undefined, decorators: [{ type: _angular_core.Inject, args: [MESSAGES_CONFIG,] }, { type: _angular_core.Optional },] },
    ]; };
    return NotificationBarComponent;
}());

var NotificationBarModule = (function () {
    function NotificationBarModule() {
    }
    NotificationBarModule.forRoot = function (config) {
        return {
            ngModule: NotificationBarModule,
            providers: [
                { provide: MESSAGES_CONFIG, useValue: config }
            ]
        };
    };
    NotificationBarModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    imports: [
                        _angular_common.CommonModule
                    ],
                    declarations: [NotificationBarComponent],
                    providers: [NotificationBarService],
                    exports: [NotificationBarComponent]
                },] },
    ];
    /** @nocollapse */
    NotificationBarModule.ctorParameters = function () { return []; };
    return NotificationBarModule;
}());

(function (NotificationType) {
    NotificationType[NotificationType["Info"] = 0] = "Info";
    NotificationType[NotificationType["Success"] = 1] = "Success";
    NotificationType[NotificationType["Error"] = 2] = "Error";
    NotificationType[NotificationType["Warning"] = 3] = "Warning";
})(exports.NotificationType || (exports.NotificationType = {}));

exports.NotificationBarModule = NotificationBarModule;
exports.NotificationBarService = NotificationBarService;

Object.defineProperty(exports, '__esModule', { value: true });

})));
