{"version":3,"sources":["../../src/notification-bar.component.ts"],"names":[],"mappings":"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","file":"notification-bar.component.js","sourceRoot":"","sourcesContent":["import {\n    Component, OnInit, trigger, state, style, transition, animate, Optional, Inject,\n    OpaqueToken, OnDestroy\n} from '@angular/core';\n\nimport { NotificationBarService } from './notification-bar.service';\nimport { Notification, NotificationType } from '../index';\nimport { MessagesConfig } from './message-config';\nimport { Subscription } from 'rxjs';\n\n\n\nexport const MESSAGES_CONFIG = new OpaqueToken('notification-bar.messages.config');\n\n\nexport class NotificationBarComponent implements OnInit, OnDestroy {\n\n    notifications: Notification[] = [];\n\n    defaults = {\n        message: '',\n        type: NotificationType.Info,\n        autoHide: true,\n        hideDelay: 3000,\n        isHtml: false,\n        allowClose: false,\n        hideOnHover: true\n    };\n\n    subscription: Subscription;\n\n    constructor(\n        private notificationBarService: NotificationBarService,\n          private config?: MessagesConfig\n    ) {\n        this.subscription = this.notificationBarService.onCreate.subscribe(this.addNotification.bind(this));\n    }\n\n    ngOnInit() { }\n\n    addNotification(notification: Notification) {\n        let newNotification = Object.assign({}, this.defaults, notification);\n        newNotification.typeValue = NotificationType[newNotification.type].toLowerCase();\n        if (this.config && this.config.messages) {\n            newNotification.message = this.config.messages[notification.message] || notification.message;\n        }\n\n        this.notifications.push(newNotification);\n\n        if (newNotification.autoHide) {\n            window.setTimeout(() => {\n                this.hideNotification(newNotification);\n            }, newNotification.hideDelay);\n        }\n    }\n\n    hideNotification(notification: Notification) {\n        let index = this.notifications.indexOf(notification);\n\n        this.notifications.splice(index, 1);\n    }\n\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n\n    hideOnHover(notification: Notification) {\n        if (notification.hideOnHover) {\n            this.hideNotification(notification);\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'notification-bar',\n    styles: [`\n        :host {\n          position: relative;\n          display: block;\n        }\n        \n        .notifications-container {\n          position: fixed;\n          top: 0px;\n          right: 0;\n          left: 0;\n          line-height: 25px;\n          width: 100%;\n          z-index: 6;\n          overflow: hidden;\n        }\n        \n        .notification {\n          position: relative;\n          text-align: center;\n          font-size: 12px;\n          color: #fff;\n        }\n        \n        .message {\n          padding: 0 12px;\n        }\n        \n        .error {\n          background-color: #F64747;\n          border-bottom: 1px solid #f31515;\n        }\n        \n        .success {\n          background-color: #03C9A9;\n          border-bottom: 1px solid #02aa8f;\n        }\n        \n        .warning {\n          background-color: #F7CA18;\n          border-bottom: 1px solid #e7ba08;\n        }\n        \n        .info {\n          background-color: #0c6997;\n          border-bottom: 1px solid #0c6997;\n        }\n        \n        .close-click {\n          font-size: 22px;\n          cursor: pointer;\n          padding: 10px;\n          position: relative;\n          top: 2px;\n          margin: 0 auto;\n        }\n    `],\n    template: `\n        <div class=\"notifications-container\">\n            <div *ngFor=\"let notification of notifications; let i = index;\"\n                 class=\"notification {{notification.typeValue}}\"\n                 (mouseover)=\"hideOnHover(notification)\"\n                 [@flyDown]>\n                <span *ngIf=\"notification.isHtml\" class=\"message\" [innerHTML]=\"notification.message\"></span>\n                <span *ngIf=\"!notification.isHtml\" class=\"message\">{{notification.message}}</span>\n                <span class=\"close-click\" *ngIf=\"notification.allowClose\" (click)=\"hideNotification(notification)\">Ã—</span>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('flyDown', [\n            state('in', style({\n                opacity: 1,\n                transform: 'translateY(0)'\n            })),\n            transition('void => *', [\n                style({\n                    opacity: 0,\n                    transform: 'translateY(-100%)'\n                }),\n                animate('600ms ease-in')\n            ]),\n            transition('* => void', [\n                animate('200ms ease-out', style({\n                    opacity: 0,\n                    transform: 'translateY(-100%)'\n                }))\n            ])\n        ])\n    ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NotificationBarService, },\n{type: undefined, decorators: [{ type: Inject, args: [MESSAGES_CONFIG, ] }, { type: Optional }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}