import { Component, trigger, state, style, transition, animate, Optional, Inject, OpaqueToken } from '@angular/core';
import { NotificationBarService } from './notification-bar.service';
import { NotificationType } from '../index';
export var MESSAGES_CONFIG = new OpaqueToken('notification-bar.messages.config');
var NotificationBarComponent = (function () {
    function NotificationBarComponent(notificationBarService, config) {
        this.notificationBarService = notificationBarService;
        this.config = config;
        this.notifications = [];
        this.defaults = {
            message: '',
            type: NotificationType.Info,
            autoHide: true,
            hideDelay: 3000,
            isHtml: false,
            allowClose: false,
            hideOnHover: true
        };
        this.subscription = this.notificationBarService.onCreate.subscribe(this.addNotification.bind(this));
    }
    NotificationBarComponent.prototype.ngOnInit = function () { };
    NotificationBarComponent.prototype.addNotification = function (notification) {
        var _this = this;
        var newNotification = Object.assign({}, this.defaults, notification);
        newNotification.typeValue = NotificationType[newNotification.type].toLowerCase();
        if (this.config && this.config.messages) {
            newNotification.message = this.config.messages[notification.message] || notification.message;
        }
        this.notifications.push(newNotification);
        if (newNotification.autoHide) {
            window.setTimeout(function () {
                _this.hideNotification(newNotification);
            }, newNotification.hideDelay);
        }
    };
    NotificationBarComponent.prototype.hideNotification = function (notification) {
        var index = this.notifications.indexOf(notification);
        this.notifications.splice(index, 1);
    };
    NotificationBarComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    NotificationBarComponent.prototype.hideOnHover = function (notification) {
        if (notification.hideOnHover) {
            this.hideNotification(notification);
        }
    };
    NotificationBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'notification-bar',
                    styles: ["\n        :host {\n          position: relative;\n          display: block;\n        }\n        \n        .notifications-container {\n          position: fixed;\n          top: 0px;\n          right: 0;\n          left: 0;\n          line-height: 25px;\n          width: 100%;\n          z-index: 6;\n          overflow: hidden;\n        }\n        \n        .notification {\n          position: relative;\n          text-align: center;\n          font-size: 12px;\n          color: #fff;\n        }\n        \n        .message {\n          padding: 0 12px;\n        }\n        \n        .error {\n          background-color: #F64747;\n          border-bottom: 1px solid #f31515;\n        }\n        \n        .success {\n          background-color: #03C9A9;\n          border-bottom: 1px solid #02aa8f;\n        }\n        \n        .warning {\n          background-color: #F7CA18;\n          border-bottom: 1px solid #e7ba08;\n        }\n        \n        .info {\n          background-color: #0c6997;\n          border-bottom: 1px solid #0c6997;\n        }\n        \n        .close-click {\n          font-size: 22px;\n          cursor: pointer;\n          padding: 10px;\n          position: relative;\n          top: 2px;\n          margin: 0 auto;\n        }\n    "],
                    template: "\n        <div class=\"notifications-container\">\n            <div *ngFor=\"let notification of notifications; let i = index;\"\n                 class=\"notification {{notification.typeValue}}\"\n                 (mouseover)=\"hideOnHover(notification)\"\n                 [@flyDown]>\n                <span *ngIf=\"notification.isHtml\" class=\"message\" [innerHTML]=\"notification.message\"></span>\n                <span *ngIf=\"!notification.isHtml\" class=\"message\">{{notification.message}}</span>\n                <span class=\"close-click\" *ngIf=\"notification.allowClose\" (click)=\"hideNotification(notification)\">\u00D7</span>\n            </div>\n        </div>\n    ",
                    animations: [
                        trigger('flyDown', [
                            state('in', style({
                                opacity: 1,
                                transform: 'translateY(0)'
                            })),
                            transition('void => *', [
                                style({
                                    opacity: 0,
                                    transform: 'translateY(-100%)'
                                }),
                                animate('600ms ease-in')
                            ]),
                            transition('* => void', [
                                animate('200ms ease-out', style({
                                    opacity: 0,
                                    transform: 'translateY(-100%)'
                                }))
                            ])
                        ])
                    ]
                },] },
    ];
    /** @nocollapse */
    NotificationBarComponent.ctorParameters = function () { return [
        { type: NotificationBarService, },
        { type: undefined, decorators: [{ type: Inject, args: [MESSAGES_CONFIG,] }, { type: Optional },] },
    ]; };
    return NotificationBarComponent;
}());
export { NotificationBarComponent };
//# sourceMappingURL=notification-bar.component.js.map